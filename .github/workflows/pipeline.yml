name: CI/CD

on:
  push:
    branches: 
    - dev
    - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check in to branch
      uses: actions/checkout@v2

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
          images: mikaelaolsson/cloudapp
      
    - name: Setup Dotnet Environment
      uses: actions/setup-dotnet@v1
      with:
            dotnet-version: 5.0.x
    - name: Run restore
      run: dotnet restore
        
    - name: Build dotnet
      run: dotnet build --no-restore
    - name: Run test
      run: dotnet test --no-build
        
    - name: Login to Docker
      uses: docker/login-action@v1
      with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Building the Docker Image with tag
      uses: docker/build-push-action@v2.9.0
      with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          file: ./CloudApp/Dockerfile


    # - name: Building the Docker Image with dev-tag
    #   if: github.ref == 'refs/heads/dev'
    #   uses: docker/build-push-action@v2.9.0
    #   with:
    #       push: true
    #       tags: mikaelaolsson/cloudapp:dev
    #       file: ./CloudApp/Dockerfile

    # - name: Building the Docker Image with latest-tag
    #   if: github.ref == 'refs/heads/main'
    #   uses: docker/build-push-action@v2.9.0
    #   with:
    #       push: true
    #       tags: mikaelaolsson/cloudapp:latest
    #       file: ./CloudApp/Dockerfile
  
  pull-request:
    if: github.ref == 'refs/heads/dev'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout        
        uses: actions/checkout@v2

      - name: Create Pull Request
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "main"
          github_token: ${{ secrets.PAT }}


  deploy: 
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved
      - name: Setup VPN Config
        run: |
          echo "${{ secrets.CA_CERT }}" > ca.crt
          echo "${{ secrets.USER_CERT }}" > client.crt
          echo "${{ secrets.TLS_KEY }}" > tls.key

      - name: Connect to VPN
        uses: "kota65535/github-openvpn-connect-action@v1"
        with:
          config_file: ./.github/vpn/config.ovpn
          username: 'openvpn'
          password: ${{ secrets.VPN_PASSWORD }}
          client_key: ${{ secrets.USER_KEY }}

      - name: Run ssh command using private key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: kubectl rollout restart deployment cloudapp